package com.univr.diabetes_logger.controller;

import java.util.Optional;
import java.util.Properties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.univr.diabetes_logger.model.Patient;
import com.univr.diabetes_logger.model.User;
import com.univr.diabetes_logger.service.PatientService;
import com.univr.diabetes_logger.service.UserService;

import org.springframework.web.bind.annotation.PutMapping;

/**
 * UserController
 */
@RestController // This means that this class is a Controller
@RequestMapping // This means URL's start with /users (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserService userService;
  private PatientService patientService;

  public UserController(UserService userService, PatientService patientService) {
    this.userService = userService;
    this.patientService = patientService;
  }

  @PostMapping("/login")
  public Properties login(@RequestBody User user, UriComponentsBuilder uriBuilder) {
    return userService.verify(user);
  }

  @PostMapping("/register")
  public ResponseEntity<User> register(@RequestBody User user, UriComponentsBuilder uriBuilder) {
    Patient patient = patientService.create(user.getPatient());
    patient.setUser(user);
    user.setPatient(patient);
    User created = userService.create(user);

    var uri = uriBuilder.path("/users/{id}").buildAndExpand(created.getId()).toUri();
    return ResponseEntity.created(uri).body(created);
  }

  @GetMapping("/users")
  public Iterable<User> getAllUsers() {
    return userService.getAll();
  }

  @GetMapping("/users/{id}")
  public ResponseEntity<User> getUserById(@PathVariable Integer id) {
    Optional<User> user = userService.getById(id);

    if (user.isEmpty()) {
      return ResponseEntity.notFound().build();
    }

    return ResponseEntity.ok(user.get());
  }

  @PutMapping("/users/{id}")
  public User updateUser(@PathVariable Integer id, @RequestBody User user) {
    return userService.update(id, user);
  }

  @DeleteMapping("/users/{id}")
  public User deleteUser(@PathVariable Integer id) {
    return userService.delete(id);
  }
}
