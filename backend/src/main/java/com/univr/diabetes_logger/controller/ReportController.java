package com.univr.diabetes_logger.controller;

import java.util.List;
import java.util.Optional;

import com.univr.diabetes_logger.model.Report;
import com.univr.diabetes_logger.model.Therapy;
import com.univr.diabetes_logger.service.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.univr.diabetes_logger.model.Medic;
import com.univr.diabetes_logger.service.MedicService;
import org.springframework.web.bind.annotation.PutMapping;

/**
 * MedicController
 */
@RestController // This means that this class is a Controller
@RequestMapping(path = "/reports") // This means URL's start with /medics (after Application path)
public class ReportController {
    @Autowired // This means to get the bean called medicRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ReportService reportService;

    public ReportController(ReportService reportService) {
        this.reportService = reportService;
    }

    @GetMapping
    public Iterable<Report> getAllReports() {
        return reportService.getAll();
    }

    @GetMapping("/{userId}/{id}")
    public Optional<Report> getReportById(@PathVariable Integer userId, @PathVariable Integer id) {
        List<Report> listOfReports = reportService.getAllByUserId(userId);

        return listOfReports.stream().filter(report -> id.equals(report.getId())).findFirst();
    }

    @GetMapping("/{userId}")
    public Iterable<Report> getReportByUserId(@PathVariable Integer userId) {
        return reportService.getAllByUserId(userId);
    }

    @PostMapping("/{userId}")
    public ResponseEntity<Report> createReport(@RequestBody Report report, @PathVariable Integer userId,
                                               UriComponentsBuilder uriBuilder) {
        Report created = reportService.createOnUser(report, userId).orElseThrow();

        var uri = uriBuilder.path("/reports/{userId}/{id}").buildAndExpand(userId, created.getId()).toUri();
        return ResponseEntity.created(uri).body(created);
    }


    @PutMapping("/{id}")
    public Report updateReport(@RequestBody Report report, @PathVariable Integer id) {
        return reportService.update(id, report);
    }

    @DeleteMapping("/{id}")
    public Report deleteReportById(@PathVariable Integer id) {
        return reportService.delete(id);
    }

}
